// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: mockapi.proto

package extapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MockAPIService_GetServiceInfo_FullMethodName = "/extapi.MockAPIService/GetServiceInfo"
)

// MockAPIServiceClient is the client API for MockAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MockAPIService is the service providing API endpoints implemented by mock API service
type MockAPIServiceClient interface {
	GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*GetServiceInfoResponse, error)
}

type mockAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockAPIServiceClient(cc grpc.ClientConnInterface) MockAPIServiceClient {
	return &mockAPIServiceClient{cc}
}

func (c *mockAPIServiceClient) GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*GetServiceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceInfoResponse)
	err := c.cc.Invoke(ctx, MockAPIService_GetServiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockAPIServiceServer is the server API for MockAPIService service.
// All implementations must embed UnimplementedMockAPIServiceServer
// for forward compatibility
//
// MockAPIService is the service providing API endpoints implemented by mock API service
type MockAPIServiceServer interface {
	GetServiceInfo(context.Context, *GetServiceInfoRequest) (*GetServiceInfoResponse, error)
	mustEmbedUnimplementedMockAPIServiceServer()
}

// UnimplementedMockAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMockAPIServiceServer struct {
}

func (UnimplementedMockAPIServiceServer) GetServiceInfo(context.Context, *GetServiceInfoRequest) (*GetServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedMockAPIServiceServer) mustEmbedUnimplementedMockAPIServiceServer() {}

// UnsafeMockAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockAPIServiceServer will
// result in compilation errors.
type UnsafeMockAPIServiceServer interface {
	mustEmbedUnimplementedMockAPIServiceServer()
}

func RegisterMockAPIServiceServer(s grpc.ServiceRegistrar, srv MockAPIServiceServer) {
	s.RegisterService(&MockAPIService_ServiceDesc, srv)
}

func _MockAPIService_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockAPIServiceServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockAPIService_GetServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockAPIServiceServer).GetServiceInfo(ctx, req.(*GetServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MockAPIService_ServiceDesc is the grpc.ServiceDesc for MockAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "extapi.MockAPIService",
	HandlerType: (*MockAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _MockAPIService_GetServiceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockapi.proto",
}
